//package test;
package com.lapis_semi.lazurite.io;
import com.ochafik.lang.jnaerator.runtime.Structure;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
//import com.sun.jna.Structure;
import java.util.Arrays;
import java.util.List;
//import test.TestLibrary.time_t;
/**
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class SUBGHZ_MAC extends Structure<SUBGHZ_MAC, SUBGHZ_MAC.ByValue, SUBGHZ_MAC.ByReference > {
	/** C type : time_t */
	//public time_t tv_sec;
	public NativeLong tv_sec;
	public NativeLong tv_nsec;
	public short header;
	public byte frame_type;
	public byte sec_enb;
	public byte pending;
	public byte ack_req;
	public byte panid_comp;
	public byte seq_comp;
	public byte ielist;
	public byte tx_addr_type;
	public byte frame_ver;
	public byte rx_addr_type;
	public byte seq_num;
	public byte addr_type;
	public short rx_panid;
	/** C type : uint8_t[8] */
	public byte[] rx_addr = new byte[8];
	public short tx_panid;
	/** C type : uint8_t[8] */
	public byte[] tx_addr = new byte[8];
	/** C type : char* */
	public Pointer raw;
	public short raw_len;
	/** C type : char* */
	public Pointer payload;
	public short payload_len;
	public byte rssi;
	public SUBGHZ_MAC() {
		super();
	}
	protected List<? > getFieldOrder() {
		return Arrays.asList("tv_sec", "tv_nsec", "header", "frame_type", "sec_enb", "pending", "ack_req", "panid_comp", "seq_comp", "ielist", "tx_addr_type", "frame_ver", "rx_addr_type", "seq_num", "addr_type", "rx_panid", "rx_addr", "tx_panid", "tx_addr", "raw", "raw_len", "payload", "payload_len", "rssi");
	}
	protected ByReference newByReference() { return new ByReference(); }
	protected ByValue newByValue() { return new ByValue(); }
	protected SUBGHZ_MAC newInstance() { return new SUBGHZ_MAC(); }
	public static SUBGHZ_MAC[] newArray(int arrayLength) {
		return Structure.newArray(SUBGHZ_MAC.class, arrayLength);
	}
	public static class ByReference extends SUBGHZ_MAC implements Structure.ByReference {

	};
	public static class ByValue extends SUBGHZ_MAC implements Structure.ByValue {

	};
}

